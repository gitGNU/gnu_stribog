This is ../../stribog/doc/stribog.info, produced by makeinfo version
4.8 from ../../stribog/doc/stribog.texinfo.

   This manual is for stribog 0.0.1 (edition 0, updated 10 Oct 2009),
which is a MEMS-based attitude sensing platform.

   Copyright (C) 2008, 2009 Ineiev

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with the Invariant Sections being "Distribution" and
     "GNU General Public License", with the Front-Cover texts being
     "GFDL-covered", and with no Back-Cover Texts.  A copy of the
     license is included in the section entitled "GNU Free
     Documentation License".

INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* stribog: (stribog).           Attitude sensing platform
END-INFO-DIR-ENTRY


File: stribog.info,  Node: Top,  Next: Distribution,  Up: (dir)

Stribog Developer Manual
************************

This manual is for stribog 0.0.1 (edition 0, updated 10 Oct 2009),
which is a MEMS-based attitude sensing platform.

   Copyright (C) 2008, 2009 Ineiev

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with the Invariant Sections being "Distribution" and
     "GNU General Public License", with the Front-Cover texts being
     "GFDL-covered", and with no Back-Cover Texts.  A copy of the
     license is included in the section entitled "GNU Free
     Documentation License".

* Menu:

* Distribution::                        Your rights and freedoms

* Intro::                               Who, What, Where
* Getting Started::
* Host-side Utilities::                 stribog programs to run on fat machine
* In-depth Guide::                      Development process

* GNU General Public License::          Propagating the project
* GNU Free Documentation License::      Copying and sharing this manual

 --- The Detailed Node Listing ---

* Intro::                               Who, What, Where
*   In Short::                          What stribog is
*   Address::                           Where to get
*   Name::                              How to pronounce `stribog'

* Getting Started::
*   Prerequisites::                     General development environment
*   Tools Used::                        What you'll probably want to install
*     GNU Cross-tools::                 General notes on the cross-tools
*     ARM Tools::                       ARM-specific binutils+gcc build
*     AVR Tools::                       AVR-targeted build and AVR-libc
*     PCB::                             Printed Circuit Board Layout Editor
*     gerbv::                           Gerber files previewer
*     gEDA::                            gschem, gsch2pcb and dependencies
*     Older systems::                   building tools on older systems
*   Building stribog::
*     Host Files::                      Prepare your POSIX machine
*     Hardware Manufacturing::          Make the boards
*     Firmware Installation::           Upload the programs to hardware

* Host-side Utilities::                 stribog programs to run on fat machine

* In-depth Guide::
*   Using Git::                         Getting the version you need
*     Git Commands::                    Git invocation
*     Branches::                        Naming and meta-documentation
*     VCS Contents::                    What goes to Git, and why
*   Autoreconf::                        Regenerating build system

 Invariant sections

* Distribution::                        Your rights and freedoms
*   Jurisdictions::                     Possible local variations
*   Contents::                          What needs to be in a distribution
*   Final remarks::


File: stribog.info,  Node: Distribution,  Next: Intro,  Prev: Top,  Up: Top

1 Distribution
**************

                                             Dropping out will not stop
                                           capitalism and the state and
                                         while such communities may try
                                        to ignore the system, they will
                                          find that the system will not
                                          ignore them -- they will come
                                       under competitive and ecological
                                              pressures from capitalism
                                           whether they like it or not.

                                        --An Anarchist FAQ, section J.5

* Menu:

* Jurisdictions::
* Contents::                            What needs to be in a distribution
* Final remarks::

   You may distribute stribog under the terms of the GNU GPL version
3 or (at your option) any later version(1).  These terms were not usual
when the project started, neither for software and particularly for
hardware designs; commonly used terms were much more restrictive.  This
is why you should tell everyone to whom you distribute the project that
it is free; you also should make sure that your customer has the
correct idea of this freedom.

   When all technical information is free, this requirement shall not
bind you any more.

   ---------- Footnotes ----------

   (1)  As a special exception, you may use gschem symbols derived from
external sources (e.g. geda symbols) that are distributed under the GNU
GPL version 2 when they are not originally distributed under the GNU
GPLv3-compatible license. these symbols must be distributed with other
source files of the project and considered an external library or
augmentation of geda-symbols package. they can't be embedded in any
stribog file.


File: stribog.info,  Node: Jurisdictions,  Next: Contents,  Up: Distribution

1.1 Jurisdiction cases
======================

In theory, the implications of applying the GNU GPL to the hardware
design can depend on your jurisdiction.

   The Bern Convention, article 2.7 saith:

     it shall be a matter for legislation in the countries of the Union
     to determine the extent of the application of their laws to works
     of applied art and industrial designs and models, as well as the
     conditions under which such works, designs and models shall be
     protected.

   It is virtually universally accepted that the software falls under
this convention, but this does not extends to hardware designs.

   Thus, three groups of cases are possible:

1.1.1 No official law
---------------------

This is possible in cases when in your country either

  a. the government does not honour copyright and Bern Convention, or

  b. the law practice does not consider technical articles like
     software and hardware descriptions as pieces of art.

   Then you are lucky and the GPL is not about you. Beware that this is
the most impossible case, in spite of that it is the most reasonable
one.

1.1.2 Homogeneous law
---------------------

This means that both programs and hardware are considered as works of
art and printed circuit boards are treated as derived from the design
description works. Then the conditions are like following.

   All that comes from the project forms a derived work, including the
assembled boards. They should be distributed in a the GPL-compliant way
as "Object Code".  Essentially this means that if someone ships a
stribog-derived board, this person or organisation must make available
(for those who get the product) a copy of documentation needed at least
to reproduce this board; this supplier shall not prevent downstream
distribution in terms other than that of the GNU GPL version 3 or later
with symbols exception (*note symbols-exception::). Another thing to
note is the Section 11 of the GNU GPL version 3 (on patents). While
there should be no software patents, the hardware ones are ubiquitous.

   As a consequence using stribog-derived circuits in a device is
permitted in either of two ways:
  a. The whole device is distributed under the terms of the GNU GPL
     version 3 or later with symbols exception (*note
     symbols-exception::)  with the stribog's authors' interpretation
     for the hardware part.   This is the preferable way.

  b. The device can reasonably be considered as an independent work.

   For example, connecting a board to stribog main board via connectors
that provide power, UART signals and angular rate sensors output does
not make the former board stribog-derived, because there is nothing very
specific in those signals and the boards are distinct; but if some
stribog circuits are incorporated into another board, there is no more
separable independent work, so that board must be covered by the GNU
GPL version 3 or later with symbols exception (*note
symbols-exception::). Similarly, if you modify stribog so that it will
require/provide complicated signals from/to your board, therefore
making it unimaginable to function one without the other -- in this
case the whole system shall be covered by the GNU GPL version 3 or
later with symbols exception (*note symbols-exception::).

1.1.3 Heterogeneous law
-----------------------

Printed boards are not considered to be a derived work. This is
probably the most frequent case (at least, this applies to the USA).

   You may produce the boards and do all you want with them. You are not
obliged (though encouraged) to give the design files when you supply
the board instances (till now, we have not been speaking of software,
just about the hardware design).

   I'm afraid it's you who is in charge to find out what your case is.
However, you certainly won't be sued if you don't hide any
project-derived sources.


File: stribog.info,  Node: Contents,  Next: Final remarks,  Prev: Jurisdictions,  Up: Distribution

1.2 Distribution contents
=========================

When any version the GNU GPL concerned, there is some difference
between embedded and desktop software.

   Harald Welte provides a nice guide on what should come with
distribution at `http://www.gpl-violations.org/faq/sourcecode-faq.html'.
He argues that it must contain the whole toolchain (or at least an
offer, which is actually harder to implement). Fortunately, we use the
GNU GPL version 3. It's section 1 (Source Code) contains an exception:

     However, it (the "Corresponding Source" -- ineiev) does not
     include the work's System Libraries, or general-purpose tools or
     generally available free programs which are used unmodified in
     performing those activities but which are not part of the work.

   This means that you don't need to include all these tools when you
use them unpatched -- and the maintainer policy is to use mainstream
tools. If something is wrong, it is much better to send the patch to
the original developers so that it could be useful for other users.

   Also, the GNU GPL makes difference between source and object form.
The source code may be distributed even if there is no reasonable way
to produce any executables. For the instance, the savannah Git
repository or a tarball of a working copy makes a compliant
distribution.

   In contrast, if somebody distribute object forms, they need to
provide all the corresponding sources.  This is mainly concerned with
the case when a board with GPL-covered firmware is supplied.


File: stribog.info,  Node: Final remarks,  Prev: Contents,  Up: Distribution

1.3 Final remarks
=================

Please note that the intention of these provisions is not to prevent you
from using the project, but to create conditions leading to the society
without copyright restrictions on spreading technical ideas.  Again,
all these mumbo-jumbos are not valid by themselves, it is the insane
legal system that gives them power. They are but direct reaction on
this system. They just prevent _certain_ uses that are (and not without
a good reason) considered to be socially harmful; they prevent such
uses precisely and only because they considered to be socially harmful.


File: stribog.info,  Node: Intro,  Next: Getting Started,  Prev: Distribution,  Up: Top

2 Introduction
**************

* Menu:

* In Short::                            What stribog is
* Address::                             Where to get
* Name::                                How to pronounce `stribog'


File: stribog.info,  Node: In Short,  Next: Address,  Up: Intro

2.1 In Short
============

Stribog is an attempt implement a platform for measuring user
orientation relative to sides of world: azimuth, pitch and roll.  The
hardware includes a 3-axis magnetoresistive compass, a tilt sensor
based on accelerometer ICs and an ARM microcontroller to manage all.

   The project consists of hardware and software sections, both under
the GNU GPL.

   The hardware section includes all information needed for reproducing
the system, i.e. schematics, boards layout in the form that most board
manufacturers accept and so on. It is implemented using GPLd packages
gEDA (`http://geda.seul.org') and pcb
(`https://sourceforge.net/projects/pcb').

   The hardware is based on Honeywell magnetoresistive sensors, the
most precise relatively low-cost magnetic sensors, Analog Devices MEMS
accelerometers and optionally Analog Devices angular rate sensors.  the
microcontroller is a Philips ARM-based LPC2138.  All these are expected
to show about 1-degree precision. ARM programs are developped with GNU
toolchain (GCC/Binutils) and some stribog internal programs.

   Some auxiliary parts are impelmented using AVR microcontrollers.

   The programs are developped using free AVR-libc/GCC/Binutils/uisp
toolchains.

   It is also planned to use the platform motion data obtained from a
GPS sensor.

   The current status is alpha. The data from magnetic, GPS and other
sensors are logged on a computer; then some post-processing is made.


File: stribog.info,  Node: Address,  Next: Name,  Prev: In Short,  Up: Intro

2.2 Address
===========

Stribog project is hosted at Savannah, it's project page is:

   `http://savannah.nongnu.org/projects/stribog'

   The most recent revisions are available via savannah Git repository
(*note Using Git::).

   Released sources and sample data are available at downloads page:

   `http://download.savannah.gnu.org/releases/stribog/'


File: stribog.info,  Node: Name,  Prev: Address,  Up: Intro

2.3 The Name
============

The project was named after a Slavonic god, most probably the god of
winds.  The original term has not been in active use since XII
century(1).  The rithms of the tongue have transformed very much since
then, the very orthography suffered a reform. Thus we can't tell how to
pronounce the name correctly; we are even not sure how to transliterate
it with Latin letters properly. The problem is that the word ended with
a reduced vowel designated with a special letter, `yerr'(2). These
reduced vowels fell two centuries later, and the Bolsheviks abolished
them in 1918 together with other adorable archaics.

   With all these things being respected, we do have a tendency to
pronounce it in two syllables with the second one stressed.  This
second syllable sounds pretty like `bog'; the first is similar to
`string' without the ending `ng', the difference is in `t', which is
not alveolar, but dental in most of the Easten Slavonic languages, that
is, it is pronounced with the tongue touching the upper teeth, unlike
the English `t'. Also, the Slavonic `r' certainly sounds much harder
than the English one, and it is palatised before the `i'.

   To distinguish the project from the deity please write the former in
the lowercase whenever possible: `stribog'.

   ---------- Footnotes ----------

   (1) `The Word about Igor's Troop' shows some latest appearances of
the genuine tradition.

   (2) This letter is now known as `hard sign' and has a different
meaning.


File: stribog.info,  Node: Getting Started,  Next: Host-side Utilities,  Prev: Intro,  Up: Top

3 Getting Started
*****************

* Menu:

* Prerequisites::
* Tools Used::
* Building stribog::


File: stribog.info,  Node: Prerequisites,  Next: Tools Used,  Up: Getting Started

3.1 Prerequisites
=================

The canonical development environment for this project is a GNU/Linux
operating system. The maintainer tries to ensure that any more or less
POSIX operating system with an X Window implementation can be used(1),
at least, to build the project from distribution tarball, though it is
impossible to test all such systems.

   The distributed files are arranged to permit a reasonable development
flexibility. This means that when you have not, for example, X Window
installed, you still can develop the components of stribog that don't
require graphical editors. If you need a reference to the project
schematics or boards, you can browse them in general graphics formats.
These files are stored in addition to the sources in the distributions.

   Autoconf `configure' scripts check the tools availability and switch
off the corresponding projects automatically. You also can do it
manually.

   This approach was adopted due to need for portability. While running
field tests, we could not sometimes predict the platform on which the
host-side utilities would have to run. It would be very inconvenient to
install the full toolset every time, so the parts of the project using
different tools should be capable to build independently.

   Actually the minimum set of tools is a shell capable to run
Autoconf-generated scripts and a `make' understanding
Automake-generated `Makefile's.  These tools produce configuration
files which control building and regeneration processes of stribog
object files.

   Moreover, it is almost inevitable to have a native C compiler. It is
needed to build stribog host-side utilities; it is needed to install
all tools used by stribog: the orthodoxal way is to build them from the
sources. The sources are vitally necessary in the free software world,
you can't tell the software free until you have built it from the
sources. If you don't, you must rely on the other's words, and blindly
relying is always dangerous.

   It is very naturally for a POSIX system to have a native C compiler.
However, there is plenty of most different GNU/Linux distributions now,
and there is a chance that you have no working compiler in yours. In
most cases, this can be fixed very easily if your computer has an
Internet connection; if it has not, you probably know yourself how to
deal with it.

   ---------- Footnotes ----------

   (1) This actually means that the authors won't bet that stribog is
unbuildable there


File: stribog.info,  Node: Tools Used,  Next: Building stribog,  Prev: Prerequisites,  Up: Getting Started

3.2 Tools Used
==============

This section explains how to install main tools used to develop stribog,
and what prerequisites they may require.

   If some tools are not covered with this section, it means that they
must be available on most Unix-like systems or they can be easily
installed.  Generic installation instructions are usually situated in
the `INSTALL' file.

* Menu:

* GNU Cross-tools::                     General notes on the cross-tools
* ARM Tools::                           ARM-specific binutils+gcc build
* AVR Tools::                           AVR-targeted build and AVR-libc
* PCB::                                 Printed Circuit Board Layout Editor
* gerbv::                               Gerber files previewer
* gEDA::                                gschem, gsch2pcb and dependencies
* Older systems::                       building tools on older systems


File: stribog.info,  Node: GNU Cross-tools,  Next: ARM Tools,  Up: Tools Used

3.2.1 GNU Cross-tools
---------------------

The programs for processors of stribog are built with GNU toolchain
including Binutils and GCC. To produce a complete toolset for AVR we
also need AVR-libc, which is free software, but it is not a part of the
GNU project.

   Some releases of GCC use in their build process general parsers
generators, bison and flex.

   On systems other than GNU you should invoke GNU make. Some of these
packages don't build themselves as described below with OpenBSD 3.9
native make.  Use gmake instead. The same is true for stribog sources.
When GNU make is not available, you may want to try non-VPATH build,
that is to run `configure' in the topmost directory, like `./configure
--target=arm-unknown-elf' and so on.  Another widely known tradition
prescribes `mkdir obj; cd obj; ../configure ...'.

   Binutils releases tarballs are located at
`ftp://ftp.gnu.org/pub/gnu/binutils/', GCC can be found on the same FTP
site at `ftp://ftp.gnu.org/pub/gnu/gcc/'. We need single binutils
tarball (e.g. `binutils-2.17.tar.bz2'), it's PGP signature
(`binutils-2.17.tar.bz2.sig') to make sure that we downloaded the file
correctly, and the same for GCC (say, `gcc-core-4.2.2.tar.bz2' and
`gcc-core-4.2.2.tar.bz2.sig').  You can download `gcc-4.2.2.tar.bz2'
instead of `gcc-core-4.2.2.tar.bz2'.  It contains additional language
support such as Fortran and Ada.  We don't use these languages, and our
ARM-hosted startup programs don't support them.

   You also will need to get public keys for these signatures and import
them into your gnupg keyring. Read gnupg manual on how to do this.

   As of Feb 2009, we recommend binutils-2.17 and gcc-4.2.2.

   Newer GCC releases series (gcc-4.3.0 and later) require MPFR library.
This somewhat lengthens the dependencies list; it may require your GMP
library update.

   As for gcc-4.2.3 and gcc-4.2.4, they are OK for building our ARM
toolchain, but unfortunately, AVR target is unbuildable on top of
binutils-2.17 and even binutils-2.18; we have a good reason to hope
that the next release will fix this.

   binutils-2.18 is not very stable; you'd better use binutils-2.19
instead.

   Both binutils-2.18 and binutils-2.19 have installation problem with
VPATH build when you have no recent enough makeinfo. You can either
build the package in it's source directory `./configure ..', or install
a new texinfo, or touch the info files, i.e. build with command

      make
      touch $(find ../binutils-2.19 -name "*.info")
      make

   If you have no fast Internet access and can't choose the versions,
older releases will work, too. To be sure, gcc-3.4.6 and binutils-2.13
are good enough for us.


File: stribog.info,  Node: ARM Tools,  Next: AVR Tools,  Prev: GNU Cross-tools,  Up: Tools Used

3.2.2 ARM Tools
---------------

To develop the programs that run on the stribog mainboard, we shall
want to install an ARM toolchain. Actually, _the_ ARM toolchain, as the
project maintainers know no other.

   First, we shall need binutils and gcc for ARM. We go to
`ftp://ftp.gnu.org/pub/gnu' and get binutils and gcc.  Generally, we
use the latest releases, though there is nothing dependent on any
supernew features in stribog. Currently we use binutils-2.17 with
gcc-4.2.4. we used also binutils-2.16.1, binutils-2.16, gcc-3.4.6,
gcc-4.0.1, gcc-4.0.3, gcc-4.1.1, gcc-4.1.2, gcc-4.2.2, gcc-4.2.3.

   The oldest versions of tools with which we have ever had a
successful build are binutils-2.11.2 and gcc-3.3.4. We can't make our
buggy programs work with earlier releases.

   The next instructions come (with some changes) from
`http://www.gnuarm.com'.

   First, define the directory where the cross-tools shall be installed
with command line:

      export armprefix=$HOME/arm

   This variable will be used in the next commands and means nothing by
itself.

     Note:  You must have write access into that directory when you
     will `make install'

   Verify and (in case of success) unpack binutils archive:

      gpg --verify binutils-2.17.tar.bz2.sig\
       && tar xjf binutils-2.17.tar.bz2

   Make directory for object files and cd there:

      mkdir bui;cd bui

   Configure, build and install binutils:

      ../binutils-2.17/configure --target=arm-unknown-elf\
       --prefix=$armprefix
      make
      make install

   Adjust your PATH variable in order to make the newly installed
binutils accessible during gcc building:

      export PATH=$armprefix/bin:$PATH;

     Note:  You will need to add this directory to your PATH  whenever
     you use this toolset

   Verify and (in case of success) unpack binutils archive:

      gpg --verify gcc-core-4.2.4.tar.bz2.sig \
       && tar xjf gcc-core-4.2.4.tar.bz2

   Clear the object files directory:

      cd ..;rm -fr bui;mkdir bui;cd bui

   Configure, build and install gcc:

      ../gcc-4.2.4/configure --target=arm-unknown-elf \
       --prefix=$armprefix --enable-languages=c \
       --disable-libssp
      make && make install

   That's all. We don't need newlib, and stribog main board has no
contacts to connect with gdb.

   `--disable-libssp' is mandatory for gcc-4.1.2 and later (currently
up to gcc-4.3.1). Otherwise the compiler will not build itself.

   You also may want to add `--disable-nls' both to binutils and gcc
`configure' invocation. This option will switch off non-English
messages from these tools. It saves some disk space.

   The order of the `configure' command line arguments does not matter.

   This sequence was tested on
  1. Fedora Core 8  (64-bit x86, native gcc (GCC) 4.1.2 20070925 (Red
     Hat 4.1.2-33))

  2. Fedora Core 4  (32-bit x86, native gcc (GCC) 4.0.0 20050519 (Red
     Hat 4.0.0-8))

  3. OpenBSD 3.9 (i386, native gcc-3.3.5).  As we mentioned, it is
     recommended to use gmake instead of make.

  4. RedHat 7.3 (i386, native gcc-2.96) You shall need to update gnupg.
     It comes with 1.0.6 version and it can't check new signatures;
     gnupg-1.4.9 is quite buildable there.


File: stribog.info,  Node: AVR Tools,  Next: PCB,  Prev: ARM Tools,  Up: Tools Used

3.2.3 AVR Tools
---------------

AVR toolchain is used to program some auxiliary boards. The toolchain
consists of the GNU Binutils, GCC and (non-GNU) AVR-libc.

   AVR-libc is available at
`http://savannah.nongnu.org/projects/avr-libc/'. Any reasonably new
version should work for our purposes; stribog authors made no thourough
research. The versions wich we knew closely are 1.4.5 and 1.6.1.

   The binutils-gcc building is similar to ARM tools, but target
triplet should be non-canonical (avr rather than avr-unknown-elf) --
this is an AVR-libc requirement; also, the latest working GCC release
for this target is gcc-4.2.2. The later GCC releases require support
for newer processors from binutils, but officially released binutils
lack it. Current binutils snapshots do provide the necessary stuff, but
it is to be released yet.  You can get them from
`ftp://sourceware.org/pub/binutils/snapshots'.

      export avrprefix=$HOME/avr
      f=binutils-2.17.tar.bz2; \
       gpg --verify $f.sig && tar xjf $f
      mkdir bui;cd bui
      ../binutils-2.17/configure --target=avr \
       --prefix=$avrprefix
      make && make install
      export PATH=$avrprefix/bin:$PATH
      f=gcc-core-4.2.2.tar.bz2; \
       gpg --verify $f.sig && tar xjf $f
      ../gcc-4.2.2/configure --target=avr \
       --prefix=$avrprefix --enable-languages=c \
       --disable-libssp
      make && make install

   After that, install AVR-libc:

      f=avr-libc-1.6.1.tar.bz2; \
       gpg --verify $f.sig && tar xjf $f
      ../avr-libc-1.6.1/configure --prefix=$avrprefix \
       --host=avr --build=$(../avr-libc-1.6.1/config.guess)
      make && make install

   Note that `--host=avr', not `--target=avr'. The library provides
parts of executables that run on AVRs, it does not build programs for
AVRs.

   `--build=$(../avr-libc-1.6.1/config.guess)' means that the
`config.guess' script, supplied with the build system of the library,
is run to get the canonical name for your operating system. This name
will be used essentially to notify the `configure' scripts that they
don't build a native library, but a library for cross-tools.


File: stribog.info,  Node: PCB,  Next: gerbv,  Prev: AVR Tools,  Up: Tools Used

3.2.4 PCB
---------

PCB is a printed circuit board layout editor. It is actually a part of
gEDA, it is developped by programmers of the same team.  However, we
describe it's installation distinctly because it has somewhat lesser
requirements(1) and because we use it more intensively than other gEDA
programs. It can be installed independently and almost self-sufficient.

   The version of PCB we currently recommend is pcb-20080202. The
previous one, pcb-20070907, was particularly buggy.  You can get the
archive at `http://sourceforge.net/projects/pcb'.  PCB releases come
without PGP signatures, but the release notes on the downloads page
usually contain MD5 and SHA1 sums. It is a good idea to cut-and-paste
them into pcb-20080202.tar.gz.sha1 and then `sha1sum -c
pcb-20080202.tar.gz.sha1'.

   My file looked like this (no spaces before and two spaces after the
checksum):

     4eb538db7086ca1b1f29e03450ed6ad28abd5c42  pcb-20080202.tar.gz

   Unpack the archive, make directory for object files and cd there:

      tar xzf pcb-20080202.tar.gz
      mkdir bui;cd bui

   Configure, build and install it:

      ../pcb-20080202/configure --prefix=$HOME/geda
      make && make install

   You may be interested in some `configure' options, especially the
following:
   * `--with-gui' selects user interface front-end. You can choose
     between gtk (GTK-based) and lesstif (LessTif or compatibles).  The
     default is gtk.

   * `--enable-maintainer-mode' enables rebuilding some files that
     usually are not rebuilt. This is useful when you get yet-unreleased
     sources from CVS.

   * `--disable-doc' prohibits rebuilding the documentation.  You may
     want to use it when building from CVS with maintainer mode disabled
     or in case when you have no texinfo installed.

   * `--with-exporters' selects file formats in which PCB will be able
     to output the PCB. Some formats may need additional libraries, so
     you may want to disable them. You will need no exporters just for
     edit layouts, but you certainly need Gerber or PNG export to print
     the board.

   ---------- Footnotes ----------

   (1) For example, it does not need Perl and guile. Also, you can
build it with older GTK version (2.4.0 minimum) or with Lesstif at your
option.


File: stribog.info,  Node: gerbv,  Next: gEDA,  Prev: PCB,  Up: Tools Used

3.2.5 Gerbv
-----------

Gerbv is a program for browsing Gerber and Excellon files(1) that PCB
outputs and that you'll hopefully send to PCB manufacturer.

   Like PCB, gerbv is a part of gEDA, though it doesn't use libgeda, it
was born as a separate project and keeps some independence for
historical reasons.

   Current version, gerbv-2.1.0, is recommended. It has a lot of new
exciting features.

   To install it, download `gerbv-2.1.0.tar.gz' and `gerbv-2.1.0.cksum'
from the project homepage `http://sourceforge.net/projects/gerbv'.
Check the sum; if it is correct, unpack and install the package:

      tar xzf gerbv-2.1.0.tar.gz
      mkdir bui;cd bui
      ../gerbv-2.1.0/configure --prefix=$HOME/geda
      make && make install

   The most strict requirement is cairo library. If you have not it,
you may want to add `--disable-cairo' option to `configure'
command-line, but it is not supported very well. Alternatively, you can
install the previous generation release, gerbv-1.0.2(2).

   ---------- Footnotes ----------

   (1) Gerber-274X is a programming language for photoplotter devices.
It is used to define topologies of PCB layers (copper layers,
silkscreen, mask and paste layers and so on). Each layer is described
with a separate file.

   Excellon is a similar language for drilling machines. For simple
boards two Excellon files are produced: one for unplated holes and
another for vias, pins and other copper-plated holes. For blind and
buried vias extra Excellon files are needed.

   (2) the latest release of this series, gerbv-1.0.3, is not
recommended. It displays Excellon files incorrectly.


File: stribog.info,  Node: gEDA,  Next: Older systems,  Prev: gerbv,  Up: Tools Used

3.2.6 gEDA
----------

     Note:  There are _a lot of_ prerequisites for these programs.
     They may be much harder to install than the gEDA suit itself.

   gEDA is a large software collection.  It's homepage is
`http://geda.seul.org'.  We don't use all these packages.  To install
those used in stribog development you need at least the next files(1):

   * `gEDA-gaf-1.3.1.md5sum': MD5 checksums (not really needed,  but
     highly recommended)

   * `geda-docs-1.3.1.tar.gz': documentation

   * `geda-gschem-1.3.1.tar.gz': schematics editor

   * `geda-gnetlist-1.3.1.tar.gz': netlist generator; used by gsch2pcb

   * `geda-symbols-1.3.1.tar.gz': symbols library

   * `geda-utils-1.3.1.tar.gz': some utilities; we'll need gsch2pcb

   * `libgeda-1.3.1.tar.gz': common library

   First, define the directory whither you will install this stuff:

      export gedaprefix=$HOME/geda

     Note:  Install gEDA into the same directory as PCB: stribog
     hardware  project desctiption scripts make this assumption;  these
     scripts will need editing otherwise. You'll see this when  you
     invoke gsch2pcb.

   Make your system aware of the executables and libraries, which will
be installed thither:

      export PATH=$gedaprefix/bin:$PATH
      export LD_LIBRARY_PATH=$gedaprefix/lib:$LD_LIBRARY_PATH
      export LD_RUN_PATH=$gedaprefix/lib:$LD_RUN_PATH
      export PKG_CONFIG_PATH=$gedaprefix/lib/pkgconfig:$PKG_CONFIG_PATH

   Check the MD5 sums:

      md5sum -c gEDA-gaf-1.3.1.md5sum

   If the sums are OK for all existing files, install the programs:

      rm -fr bui; tar xzf libgeda-1.3.1.tar.gz
      mkdir bui; cd bui
      ../libgeda-1.3.1/configure --prefix=$gedaprefix
      make all install; cd ..
      rm -fr bui libgeda-1.3.1
      tar xzf geda-utils-1.3.1.tar.gz
      mkdir bui;cd bui
      ../geda-utils-1.3.1/configure --prefix=$gedaprefix
      make all install; cd ..
      rm -fr bui geda-utils-1.3.1
      tar xzf geda-symbols-1.3.1.tar.gz
      mkdir bui; cd bui
      ../geda-symbols-1.3.1/configure --prefix=$gedaprefix
      make all install; cd ..
      rm -fr bui geda-symbols-1.3.1
      tar xzf geda-gschem-1.3.1.tar.gz
      mkdir bui; cd bui
      ../geda-symbols-1.3.1/configure --prefix=$gedaprefix
      make all install; cd ..
      rm -fr bui geda-gschem-1.3.1
      tar xzf geda-docs-1.3.1.tar.gz
      mkdir bui; cd bui
      ../geda-docs-1.3.1/configure --prefix=$gedaprefix
      make all install; cd ..
      rm -fr bui geda-docs-1.3.1

   ---------- Footnotes ----------

   (1) Currently, we develop stribog with 1.3.1 release of gEDA. We
also make sure that stribog files can be at least viewed with 20041228
release. This makes it possible to use them in older systems (*note
older-geda::).


File: stribog.info,  Node: Older systems,  Prev: gEDA,  Up: Tools Used

3.2.7 Older systems
-------------------

This section describes how to build gEDA and friends in older
environments. As a reference, RedHat 7.3 is used.

   As it has been described already, binutils+GCC toolchain may be
installed quite easily; to get a gerber previewer, use gerbv-1.0.2.

3.2.7.1 gEDA
............

You'll need geda-20041228 release.

   Install guile-devel-1.3.4-19, gtk+-devel-1.2.10-15
perl-XML-Parser-2.30-15 and their dependencies.

   The installation procedure is similar to described in *Note
geda-build::.  The only differences are versions of packages and
absence of VPATH build support: you should `configure' from sources top
directory: `./configure etc.'

3.2.7.2 PCB
...........

Surprisingly, current PCB can be build almost out-of-box (use
pcb-20080208: pcb-20081128 won't work).  It is lesstif HID that makes
it possible.

   Install lesstif-devel-0.93.18-2 and it's dependencies from RPMs.

   Then intltool-0.40.3 and as a dependency gettext-0.17 will be needed.

   Modify your environment:

      export gedaprefix=$HOME/geda
      export PATH=$gedaprefix/bin:$PATH
      export LD_LIBRARY_PATH=$gedaprefix/lib:$LD_LIBRARY_PATH

   Install the packages:

      gpg --verify gettext-0.17.tar.gz.sig \
       && tar xzf gettext-0.17.tar.gz
      mkdir bui;cd bui
      ../gettext-0.17/configure --prefix=$gedaprefix \
       && make && make install
      cd ..;rm -r gettext-0.17 bui
     # md5sum -c intltool-0.40.3.md5sum
      tar xjf intltool-0.40.3.tar.bz2
      mkdir bui;cd bui
      ../intltool-0.40.3/configure --prefix=$gedaprefix \
       && make && make install
      cd ..;rm -r intltool-0.40.3 bui

   Configure PCB with command

      ./configure --disable-xrender \
        --disable-update-mime-database \
        --disable-update-desktop-database \
        --with-gui=lesstif \
        --with-exporters=gerber,ps,bom \
        --prefix=$gedaprefix

     Note:  VPATH build may not work.

   The meaning of these `configure' script options may be obtained via
`--help' option.

   Remove from `src/edif.c' line

     extern char *strcpy();

   In RedHat 7.3, `strcpy()' is a macro and should receive two
arguments; this declaration breaks the build procedure.

   Move some variable declarations in `src/edif.c' and `src/puller.c'
to the begin of their block.

   The whole changeset is like this:


     diff -U 2 -r ../tmp/pcb-20080202/src/edif.c ./src/edif.c
     --- ../tmp/pcb-20080202/src/edif.c	Wed Jan 16 05:08:02 2008
     +++ ./src/edif.c	Fri Mar 20 18:35:26 2009
     @@ -708,5 +708,4 @@
       */
      extern void *malloc();
     -extern char *strcpy();
      extern int atoi();
      extern void free();
     @@ -766,4 +765,10 @@
       {
           LibraryMenuTypePtr menu = GetLibraryMenuMemory (&PCB->NetlistLib);
     +     LibraryEntryTypePtr entry;
     +     char* buf;
     +     char* p;
     +     int tl;
     +     str_pair* done_node;
     +     str_pair* node;
           if ( !name->str1 )
           {
     @@ -780,7 +785,5 @@
           if ( name->str2 )  free(name->str2);
           free(name);
     -     LibraryEntryTypePtr entry;
     -     char* buf = malloc(256);
     -     char* p;
     +     buf = malloc(256);
           if ( !buf )
           {
     @@ -789,7 +792,5 @@
      	 return;
           }
     -     int tl;
     -     str_pair* done_node;
     -     str_pair* node = nodes->list;
     +     node = nodes->list;
           free(nodes->name);
           free(nodes);
     diff -U 2 -r ../tmp/pcb-20080202/src/puller.c ./src/puller.c
     --- ../tmp/pcb-20080202/src/puller.c	Wed Dec 26 19:23:53 2007
     +++ ./src/puller.c	Fri Mar 20 18:36:41 2009
     @@ -879,7 +879,7 @@
      {
        int inside_p;
     +  int t = (pad->Thickness+1)/2;
        printf("pad %d,%d - %d,%d t %d  vs  %d,%d\n", pad->Point1.X, pad->Point1.Y,
      	 pad->Point2.X, pad->Point2.Y, pad->Thickness, x, y);
     -  int t = (pad->Thickness+1)/2;
        if (TEST_FLAG (SQUAREFLAG, pad))
          {
     @@ -1887,4 +1887,5 @@
      {
        Extra *e, *new_arcs;
     +  ArcTypePtr arc;
        if (r % 100 == 1)
          r--;
     @@ -1894,5 +1895,5 @@
        printf("create_arc at %d,%d r %d sa %d delta %d\n", x, y, r, sa, da);
      #endif
     -  ArcTypePtr arc = CreateNewArcOnLayer (CURRENT, x, y, r, r, sa, da,
     +  arc = CreateNewArcOnLayer (CURRENT, x, y, r, r, sa, da,
      					sample->Thickness, sample->Clearance, sample->Flags);
        if (arc == 0)

   Install PCB:

      make install

   In a similar way current GIT version of PCB most probably can be
installed after having regenerated it's build system as described in
`README.cvs'.


File: stribog.info,  Node: Building stribog,  Prev: Tools Used,  Up: Getting Started

3.3 Building stribog
====================

This section describes how to build stribog instance from sources.

   The whole process constists of three steps: setting up host
environment, hardware production and programming the hardware.

* Menu:

* Host Files::                          Prepare your POSIX machine
* Hardware Manufacturing::              Make the boards
* Firmware Installation::               Upload the programs to hardware


File: stribog.info,  Node: Host Files,  Next: Hardware Manufacturing,  Up: Building stribog

3.3.1 Host Files
----------------

Stribog uses GNU-standard configuration procedure described in
`INSTALL' file. Though general build versus source directory positions
should work, the canonical way is to build the project in a separate
directory out of the source tree, so the `configure' invocation sounds
like this:

      ../stribog/configure

   With such an arrangement, the intermediate output files from the
toolchain and the source configuration system will not lumber your
source tree and disturb the revision control system.

   The default prefix is `$HOME/stribog-install' directory. In
particular, host tools executables are placed in
`$HOME/stribog-install/bin'.  We suggest not to install the package in
your system directories.

   You can disable ARM and AVR targets with `--disable-arm-targets' and
`--disable-avr-targets' options. Then you can build and install just
the host tools, so you don't need to install the corresponding
toolchains on that host.  This can be useful if the program has already
been written into the MCU ROM or the MCU programs have been built on
another host and fetched from there. Thus you can quickly install the
host-side programs on a portable computer without cross-compiler.

   Documentation on other options is available via general `--help'
option of the `configure' script.


File: stribog.info,  Node: Hardware Manufacturing,  Next: Firmware Installation,  Prev: Host Files,  Up: Building stribog

3.3.2 Hardware Manufacturing
----------------------------

The first thing to build stribog hardware is to make a main board PCB.
There are two versions of the board: `main_board.pcb' and
`main_board_bis.pcb'. They represent the same schematics, the
difference is in components placement. The former is more compact, on
the latter the magnetic sensors moved away from other components; these
componets influence the temperature drift of the magnetic response, so
`main_board_bis.pcb' magnetic output should be more stable.

   The files needed for production come with the distribution in
`hw/main_board' and `hw/main_board_bis' directories; they are also
installed and updated in `$PREFIX/share/stribog' directory.

   One can order the PCB from different manufacturers or build it with
own hands(1).

   There are a lot of tutorials how to make a home-made PCB in the net.
If you decide to reproduce the process, you'll most probably print the
layers drawings on some substance with a printer.  The files to print
are provided in PDF and PostScript format.  Every layer is placed at a
separate page.

   To order the PCB from commercial manufacturers one send them Gerber
and Excellon files with notes on desired quantity, board material and
width and so on. The set of the files may depend on e.g. whether you
want to make the solder mask or silkscreen inscriptions.  The minimum
set consists solder and component copper layers (`.back.gbr' and
`.front.gbr'), the drill file (`-drill.cnc') and the outline
(`.fab.gbr').

   After the board is printed, mount the elements and make the cables.
We use coaxial cables to provide the power (+12 V) to prevent the
influence of the electric current on the magnetic field and to connect
PPS signal from the GPS receiver to our main board.

   We put our main boards into aluminium boxes. The boxes are not
strictly germetic, but they resist the condensates satisfactorily
during thermocycling.

   Auxiliary devices are assembled on breadboards using the schematics.
The PNG images of schematic diagrammes come with the distribution in
`hw/schematics' directory; the updated copies are installed in
`$PREFIX/share/stribog/schematics' directory.

   ---------- Footnotes ----------

   (1) Well, you can also ask someone who may have spare boards, like
stribog authors.


File: stribog.info,  Node: Firmware Installation,  Prev: Hardware Manufacturing,  Up: Building stribog

3.3.3 Firmware Installation
---------------------------

3.3.3.1 Programming the Main Board
..................................

When there is no program in the LPC2138 flash ROM, the MCU runs it's
bootloader on power-up. It communicates directly with `elk'.

   Currently the usual way to run a program on the main board is to
load it into RAM via `elk':

      elk -r -t multa

   You also can write it into ROM, then it will run on power-up by
itself:

      elk -w -t multa

   The latter way is not tested well as the whole project is in it's
early stage. In order to erase the program, you'll need to invoke
LPC2138 bootloader; it will start when you connect pin P0.14 of the MCU
(pin 8 of J1) to ground on power-up.  Then run `elk' interactively and
issue `u', `p' and `e' commands.

3.3.3.2 Programming Auxiliary Boards
....................................

Auxiliary boards are AVR-based. There are a lot of programmers for this
MCU family, e.g. `avrdude' available at
`http://savannah.nongnu.org/projects/avrdude' or obsolete `uisp' at
`http://savannah.nongnu.org/projects/uisp'.  These programs support
many programming cables. Read the documentation and choose the cable
that is best for you.


File: stribog.info,  Node: Host-side Utilities,  Next: In-depth Guide,  Prev: Getting Started,  Up: Top

4 Host-side Utilities
*********************

This section describes using stribog host-side programs.  To build them
it is typically enough to have a POSIX evironment installed.  These
programs include:

   * `elk': LPC213x bootloader host-side part. after the loaded program
     is run `elk' also sends preferences to it.

   * `conloq': data logger used to save stribog observations on the
     host filesystem. it is assummed that `multa.elf' is running on the
     stribog main board.

   * `expon': a program to translate binary files saved with
     `conloq/conloq' into text messages for subsequent processing.
     actually a simple script invoking `conloq/conloq' with specific
     options.

   * `conloq/magex-conloq': the same as conloq for `magex.elf' running
     on the board.

   * `magexp': a program to translate binary files saved with
     `conloq/magex-conloq' into text messages for subsequent processing.

   * `parse_tsipex': host-side test for stribog UART protocol.

   * `caed': splits files saved with `conloq' on pieces at given board
     times.

   * `postproc/exvel': ad-hoc mechanisation.

   * `postproc/process': a script running `exvel' and sorting it's
     output to draw the results with `gnuplot'.

   * `50hz': 50Hz synchronous detector for magnetic data.

   * `drift': estimates temperature drifts of gains and biases of the
     sensors.

   * `fdif': outputs difference between two curves.

   * `lpfilter': trivial per-column low-pass filter.

   * `stat': per-column mean and RMS estimation.


File: stribog.info,  Node: In-depth Guide,  Next: GNU General Public License,  Prev: Host-side Utilities,  Up: Top

5 In-depth Guide
****************

* Menu:

* Using Git::                           Getting the version you need
* Autoreconf::                          Regenerating build system


File: stribog.info,  Node: Using Git,  Next: Autoreconf,  Up: In-depth Guide

5.1 Using Git
=============

Git is the revision control system used by the project.  This section
describes typical configuration, branch naming conventions and usual
commands.

   This section does not tell how to install Git on your system.  It
also does not explain Git capabilities. It is just a quick reference of
invocations customised to the project on savannah.

* Menu:

* Git Commands::                        Common spells
* Branches::                            Naming and meta-documentation
* VCS Contents::                        What goes to Git, and why


File: stribog.info,  Node: Git Commands,  Next: Branches,  Up: Using Git

5.1.1 Git Commands
------------------

5.1.1.1 Git Configuration
.........................

To conveniently use Git, you should customise it, that is fill
.gitconfig file in your home directory.

   This is needed to identify the changes you'll make to the sources as
yours and to tell Git what editor you want to use when writing comments
to your changes.

   Here is a typical ~/.gitconfig file contents (please replace the
names and email with yours):

     [user]
      name = Ineiev (favourite host)
      email = ineiev@users.berlios.de
     [core]
      editor = vim

5.1.1.2 Anonymous Access
........................

For anonymous access, use these:

     git clone git://git.savannah.nongnu.org/stribog.git
   to make your local repository

     git checkout -b feb2008 origin/feb2008
   to make a local branch feb2008 based on fetched origin/feb2008

     git fetch
   to update copies of remote branches

     git pull
   to fetch all remote branches and merge one of them into your current
branch

   See also the next set of commands, common for anonymous and
read-write access.

5.1.1.3 Common Git Commands
...........................

Common to both anonymous and maintainer access:

     git checkout master
   to switch to existing branch 'master'

     git checkout -f master
   the same, through away local changes (and delete files removed from
fetched repository since last sync)

     git status
   to see what files are not in sync with the current branch

     git diff
   to see what will be "git add"ed

     git branch
   to list the local repository branches

     git branch -r
   to list the public repositories branches

     git commit
   to move the changes to your current branch

     git show
   to see the latest commit description

5.1.1.4 Maintainer Access
.........................

If you are a maintainer, your usual spells are (replace ineiev with
your login name)

     git clone ineiev@git.savannah.nongnu.org:/srv/git/stribog.git
   to get a new local repository

     add savannah ineiev@git.savannah.nongnu.org:/srv/git/stribog.git
   to add a reference for the public repository

     git push savannah feb2008
   to push into savannah local branch named 'feb2008' (non-existent
will be created)

     git push savannah
   to push into savannah all local branches

     git push savannah :refs/heads/feb2008
   to remove branch feb2008 from remote savannah


File: stribog.info,  Node: Branches,  Next: VCS Contents,  Prev: Git Commands,  Up: Using Git

5.1.2 Branches
--------------

Each branch should have a text file named 'branch' in the root
directory. From this file the name of current branch (possibly with
it's predecessors) and the purpose of the branch can be learnt.

   Branch named `master' is dedicated to most actual meta-documentation
on using Git branches, revisions and so on. There you can read about
history and purposes of Git branches of the project.

   The revisions are named within the build system (`configure.ac'
files) like 0.MAJOR.MINOR[-suffix] where MAJOR is the release branch
number, MINOR is the number of release on the branch, optional suffix
means unstable releases (rc[0-9]*) or marks interrelease revisions
(minus), e.g.
   * 0.1.2-rc2-minus means a revision between 0.1.2-rc1 and 0.1.2-rc2.

   * 0.1.2-rc[0-9]* preceeds stable version named 0.1.2

   Trunc revisions are named like 0.1-minus, which means that the
branch 0.1 is the next revision branch that to be forked out.

   Git is branched and tagged accordingly.  eventually a branch named
0.1 is created from trunc, and the revision in `configure.ac' is set to
0.1.0-rc0-minus.  then release candidates 0.1.0-rc1, 0.1.0-rc2 and so on
are released and at last release 0.1.0 is published.  after that the
release name is changed to 0.1.2-rc0-minus

   All release and release candidates should be tagged with their
numbers (e.g. 0.1.2-rc1); these tags should be signed like this:

     git tag -s -m "release candidate" 0.1.2-rc1

   An experimental branch name begins with exp.year.mon.task, where
`exp' is common prefix; the next two parts form date of forking: `mon'
is 3-letter month abbreviation, `year' is 4-digit year; `task' hints
reason why the branch was created; the letters will be lower-case.


File: stribog.info,  Node: VCS Contents,  Prev: Branches,  Up: Using Git

5.1.3 Repository Contents
-------------------------

We put all distributed files into the repository. The bottomline
consideration was that Git should be a source of the package.

   We think that today state may be correct because

  1. gEDA (especially gschem) is not always easy to install; it has
     long dependencies on rather new versions of packages.

  2. It is not convenient to have version-controlled and non-controlled
     files mixed in the same directories.

  3. If there are no build scripts, the programs can't be compiled.
     This would be wrong because the programs can be modified and
     rebuilt very quickly and at no cost.  To rebuild the scripts one
     must have a compatible Autotools version installed. Regenerating
     the scripts generally requires decent knowledge Autotools
     operation; it is substantially project-specific, so it may take a
     lot of time when done by a person new to the project. This may be
     much harder than just fixing a bug or adding even a complicated
     feature.

  4. After all, testers are not developers and builds from repository
     should be available to them.


File: stribog.info,  Node: Autoreconf,  Prev: Using Git,  Up: In-depth Guide

5.2 Autoreconf
==============

You should need this only to improve the configuring scripts and to
change the structure of the sources (add/remove source files and so
on). You often shall not want this.

   The configuring scripts are updated with `autoreconf -v'; you may
`rm -rf $(find . -name autom4te.cache)' after that.

   As of Oct 2009, the versions used are autoconf-2.62 and
automake-1.10.1.

   Previous version of Autoconf (2.61) does not allow user-defined
`confugure' arguments preprocessing.

   For some subdirectories, regeneration some portions of build system
(e.g, `Makefile.am's) needs building the project (the corresponding
`Makefile's contain rules to refresh those files).


File: stribog.info,  Node: GNU General Public License,  Next: GNU Free Documentation License,  Prev: In-depth Guide,  Up: Top

Appendix A GNU General Public License
*************************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains
free software for all its users.  We, the Free Software Foundation, use
the GNU General Public License for most of our software; it applies
also to any other work released this way by its authors.  You can apply
it to your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the software,
or if you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those domains
in future versions of the GPL, as needed to protect the freedom of
users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it
     on a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may
     convey the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any
     non-source form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work
     with that Major Component, or to implement a Standard Interface
     for which an implementation is available to the public in source
     code form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including
     scripts to control those activities.  However, it does not include
     the work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files
     associated with source files for the work, and the source code for
     shared libraries and dynamically linked subprograms that the work
     is specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output,
     given its content, constitutes a covered work.  This License
     acknowledges your rights of fair use or other equivalent, as
     provided by copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for
     you, or provide you with facilities for running those works,
     provided that you comply with the terms of this License in
     conveying all material for which you do not control copyright.
     Those thus making or running the covered works for you must do so
     exclusively on your behalf, under your direction and control, on
     terms that prohibit them from making any copies of your
     copyrighted material outside their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention
     to limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for
          as long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of
          the written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access
          to the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated
          by you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to
          the object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long
          as needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.


     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product
     is a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or
     installed by the recipient, or for the User Product in which it
     has been modified or installed.  Access to a network may be denied
     when the modification itself materially and adversely affects the
     operation of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License
     with terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be
          marked in reasonable ways as different from the original
          version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or
     conveying under this License, you may add to a covered work
     material governed by the terms of that license document, provided
     that the further restriction does not survive such relicensing or
     conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under
     the third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, you do not qualify to receive new
     licenses for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

 10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to
     possession of the Corresponding Source of the work from the
     predecessor in interest, if the predecessor has it or can get it
     with reasonable efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for
     exercise of rights granted under this License, and you may not
     initiate litigation (including a cross-claim or counterclaim in a
     lawsuit) alleging that any patent claim is infringed by making,
     using, selling, offering for sale, or importing the Program or any
     portion of it.

 11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its
     contributor version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To
     "grant" such a patent license to a party means to make such an
     agreement or commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under
     which you make payment to the third party based on the extent of
     your activity of conveying the work, and under which the third
     party grants, to any of the parties who would receive the covered
     work from you, a discriminatory patent license (a) in connection
     with copies of the covered work conveyed by you (or copies made
     from those copies), or (b) primarily for and in connection with
     specific products or compilations that contain the covered work,
     unless you entered into that arrangement, or that patent license
     was granted, prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

 12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot convey a covered work so as to satisfy
     simultaneously your obligations under this License and any other
     pertinent obligations, then as a consequence you may not convey it
     at all.  For example, if you agree to terms that obligate you to
     collect a royalty for further conveying from those to whom you
     convey the Program, the only way you could satisfy both those
     terms and this License would be to refrain entirely from conveying
     the Program.

 13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

 14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.
     Such new versions will be similar in spirit to the present
     version, but may differ in detail to address new problems or
     concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the
     Free Software Foundation.  If the Program does not specify a
     version number of the GNU General Public License, you may choose
     any version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

 15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

 16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU
     FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

 17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.


END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see `http://www.gnu.org/licenses/'.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see `http://www.gnu.org/licenses/'.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read `http://www.gnu.org/philosophy/why-not-lgpl.html'.


File: stribog.info,  Node: GNU Free Documentation License,  Prev: GNU General Public License,  Up: Top

Appendix B GNU Free Documentation License
*****************************************

                      Version 1.2, November 2002

     Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.
     51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.



Tag Table:
Node: Top895
Node: Distribution3926
Ref: Distribution-Footnote-15454
Ref: symbols-exception5461
Node: Jurisdictions5887
Node: Contents9844
Node: Final remarks11476
Node: Intro12157
Node: In Short12465
Node: Address13996
Node: Name14433
Ref: Name-Footnote-115823
Ref: Name-Footnote-215917
Node: Getting Started15994
Node: Prerequisites16193
Ref: Prerequisites-Footnote-118668
Node: Tools Used18757
Node: GNU Cross-tools19753
Node: ARM Tools22507
Node: AVR Tools25826
Node: PCB28043
Ref: PCB-Footnote-130261
Node: gerbv30409
Ref: gerbv-Footnote-131523
Ref: gerbv-Footnote-231998
Node: gEDA32114
Ref: geda-build33323
Ref: gEDA-Footnote-134739
Node: Older systems34962
Ref: older-geda35353
Node: Building stribog39683
Node: Host Files40214
Node: Hardware Manufacturing41641
Ref: Hardware Manufacturing-Footnote-143993
Node: Firmware Installation44081
Node: Host-side Utilities45392
Node: In-depth Guide47040
Node: Using Git47338
Node: Git Commands47990
Node: Branches50474
Node: VCS Contents52324
Node: Autoreconf53545
Node: GNU General Public License54324
Node: GNU Free Documentation License91931

End Tag Table
