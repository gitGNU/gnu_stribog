Copyright (C) 2006, 2007, 2008
 Ineiev <ineiev@users.sourceforge.net>, super V 93
This file is part of stribog.

Stribog is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

See the end of the file for more notes on the license conditions.

This is the README file for stribog the sensing platform.

ATTENTION stribog is in his alpha stage. he is not functional yet.

The project is located at http://savannah.nongnu.org/projects/stribog

SOME TECHNICAL NOTES

This project consists of hardware and software sections. the former is
developed with gEDA, the latter with GNU toolchains.

Hardware contains a 3-axis {magnetoresistive compass, accelerometer,
(optionally) gyroscope} and an ARM-based microcontroller to manage all.

Software includes programs for MCU to test and align hardware parts,
to perform the measurements; the software part also has some programs
for POSIX host to receive obtained data.

Stribog is primarily designed on LPC2138, but actually LPC213[46] can be used,
too. this is selected with configure script options.

The board is programmed via serial port using a bootstrap loader.
you can use any existing one (on Unix live 
lpc_host_tools by Holly Gates <hgates@eink.com>, 
lpc21isp by Martin Maurer <Martin.Maurer@clibb.de> 
 and Aeolus Development http://aeolusdevelopment.com
lpc2k_pgm by Paul Stoffregen (http://www.pjrc.com/arm/lpc2k_pgm)

on Windows they have Philips flash ISP utility)

If you use them, you'll have to adjust input files format (.hex, .srec 
and so on) with arm-unknown-elf-objcopy(1). I don't know precisely
how to do this.

I wrote my own host-side bootstrap loader (sw/host/elk) because
 1) some of those programs (like lpc21isp) lack clear terms of use,
 2) other (like Philips utility) are neither free nor capable to run 
    on a free OS,
 3) some (like lpc2k_pgm) have graphic user interface and I don't like this,
 4) I wouldn't add external dependencies when possible.

My tools are not very reliable, but they work somehow for me and they are free.

There are two linker script templates in sw/target/src directory:
ram2138.ld.in and 2138.ld.in. the former is used to link the program
which will be loaded via elk
into RAM and run immediately. the latter used for programs saved in LPC2138 ROM;
on startup the program will be loaded into RAM and run there.
as of Mar 2008 programs don't always work correctly when linked with
ram2138.ld.in: usually it either work well or don't work at all. as a rule,
inserting or removing led0_clr() in begin of the program helps.

The programs are written in C (the ld scripts don't support C++). 
main() is executed in supervisor mode. no THUMB code. fast interrupt reserved. 
VPB divider equals 4, as by default. PLL is configured to multiply by 4.

The programs will run from RAM, when possible. even when written in ROM, boot.s
will copy it to RAM. the program uses single library: libgcc.a. 
all computations should be in fixed point.

Busy VIC slots: 3 (timer0), 4 (timer1), 5 and 6 (ADC), 7 (UART1), 8 (UART0) 

Time functions (tempus.h) are based on timer1. it uses VIC vectored interrupt
slot 4. this module receives PPS at CAP1.2 (signal A), too.

UART0 is the auxiliary port to get GPS data; uses VIC slot 8

UART1 is the basic port; uses VIC slot 7

ADC use VIC slots 5 and 6; magnetic module functions used in such way
(see magex.c, multa.c) that ADC sampling frequency defines frequency of
set/reset pulses. this frequency is adjusted to be an integer
multiplied by 50 Hz.

Magnetoresistive sensors work not so far from the absolute maximum value 
for set/reset strap duty cycle. carelessly increasing the sampling frequency 
can DAMAGE the sensors.

Timer0 is occupied by the accelerometers; VIC slot 3

HOW TO INSTALL DEVELOPMENT TOOLS

First, we shall need binutils and gcc for ARM. we go to http://www.gnu.org and
get binutils and gcc. generally, we use the latest releases, though there is 
nothing dependent on any supernew features in stribog. currently we use 
binutils-2.17 with gcc-4.2.4. we used also binutils-2.16.1, binutils-2.16,
gcc-3.4.6, gcc-4.0.1, gcc-4.0.3, gcc-4.1.1, gcc-4.1.2, gcc-4.2.2, gcc-4.2.3.

The oldest versions of tools known to successfully build
the ARM programs are binutils-2.11.2 and gcc-3.3.4.
we can't make our buggy programs work with earlier releases.

gcc-3.3.6 will not build itself on binutils-2.10.1
(and evidently on earlier binutils).

On systems other than GNU you should invoke GNU make. some of these packages
don't build themselves as described below with OpenBSD 3.9 native make.
use gmake there. the same is true for stribog sources. when GNU make
is not available, you may want to try non-VPATH build, that is
to run `configure' in the topmost directory, like
`./configure --target=arm-unknown-elf' and so on. another widely known
tradition prescribes `mkdir obj;cd obj;../configure ...'.

Follow (with some changes) instructions from http://www.gnuarm.com
($ is for our shell prompt)
$ export armprefix=$HOME/arm
                   (or where you want them to live. you must have write access
		    thither when you will `make install')
$ gpg --verify binutils-2.17.tar.bz2.sig && tar xjf binutils-2.17.tar.bz2
$ mkdir bui;cd bui
$ ../binutils-2.17/configure --target=arm-unknown-elf --prefix=$armprefix
$ make all install
$ export PATH=$armprefix/bin:$PATH; rm -fr *;cd ..
 #(add this path in your shell profile after install, too)
 #note: some gcc will not build itself when configured with a prefix
 #other than that of binutils
$ gpg --verify gcc-4.2.4.tar.bz2.sig && tar xjf gcc-4.2.4.tar.bz2;cd bui
$ ../gcc-4.2.4/configure --target=arm-unknown-elf --prefix=$armprefix --enable-languages=c --disable-libssp
$ make all install

That's all. we don't need newlib, and stribog main board has no contacts 
to connect with gdb.

--disable-libssp is mandatory for gcc-4.1.2 and later
(currently up to gcc-4.3.0). otherwise the compiler
will not build itself.

You also may want to add --disable-nls both to binutils and gcc
configure invocation. the order of the command line arguments
does not matter.

This sequence was tested on
(1) Fedora Core 4 
 (32-bit, native gcc (GCC) 4.0.0 20050519 (Red Hat 4.0.0-8))
(2) OpenBSD 3.9 (i386, native gcc-3.3.5).
as we mentioned, it is recommended to use gmake instead of make.
(3) On RedHat 7.3 (native gcc-2.96).
you shall need to update gnupg. it comes with 1.0.6 version
and it can't check new signatures; gnupg-1.4.9 is quite buildable there.

Build system of binutils-2.18 is broken; the build process stops in bfd/doc.
quick and dirty fix is to patch `missing':

--- binutils-2.18/missing	2005-07-14 05:24:56.000000000 +0400
+++ missing	2008-05-24 10:53:30.000000000 +0400
@@ -27,5 +27,5 @@
 # configuration script generated by Autoconf, you may include it under
 # the same distribution terms that you use for the rest of that program.
-
+# May 2008, ineiev: changed to build binutils-2.18
 if test $# -eq 0; then
   echo 1>&2 "Try \`$0 --help' for more information"
@@ -46,19 +46,4 @@
 
 case "$1" in
---run)
-  # Try to run requested program, and just exit if it succeeds.
-  run=
-  shift
-  "$@" && exit 0
-  # Exit code 63 means version mismatch.  This often happens
-  # when the user try to use an ancient version of a tool on
-  # a file that requires a minimum version.  In this case we
-  # we should proceed has if the program had been absent, or
-  # if --run hadn't been passed.
-  if test $? = 63; then
-    run=:
-    msg="probably too old"
-  fi
-  ;;
 
   -h|--h|--he|--hel|--help)
@@ -101,7 +86,23 @@
     exit 1
     ;;
+*)
+  # Try to run requested program, and just exit if it succeeds.
+  run=
+  if test $1 = "--run"; then
+    shift
+  fi
+  "$@" && exit 0
+  # Exit code 63 means version mismatch.  This often happens
+  # when the user try to use an ancient version of a tool on
+  # a file that requires a minimum version.  In this case we
+  # we should proceed has if the program had been absent, or
+  # if --run hadn't been passed.
+  if test $? = 63; then
+    run=:
+    msg="probably too old"
+  fi
+  ;;
 
 esac
-
 # Now exit if we have it, but it failed.  Also exit now if we
 # don't have it and --version was passed (most likely to detect

The problem was obviously not in `missing', but in automake-1.9.6, 
which was used to regenerate the build system.

GCC-4.3.0 has a new strong dependency, MPFR. we can't recommend it
because MPFR distribution comes with no signature. current version of MPFR,
2.3.1, requires gmp-4.1 or later; RedHat 7.3 has gmp-4.0.1.
after you install MPFR at prefix=$PREFIX you'll probably need to add 
$PREFIX/lib to your LD_LIBRARY_PATH shell variable and append
--with-mpfr=$PREFIX to the command line configuring the gcc
(e.g. after --disable-libssp)

Auxiliary targets (such as sw/auxilia/odo and sw/auxilia/coil) are based on
AVR. their target programs are built with avr-binutils, avr-gcc and avr-libc.
instructions on how to build this toolchain can be found in avr-libc 
documentation. for historical reasons we use uisp to load programs into these 
processors. generally avrdude is much better. they all live in 
http://savannah.gnu.org

It is much more problematic to install gEDA and friends. you'll need them if
you want to edit the hardware part of stribog. we currently use PCB 20070208
and gschem 20050820 versions.

ARM tools are necessary to program the main board, since the software 
must be configured at compile time (LPC2138 is not so fat to configure
at run time).

AVR tools will be needed only if you use auxiliary devices (currently
odometer pulses counter and sample magnetic field generator). if you
are to use auxiliary programs only, just build them as a separate project.

The gEDA are required to edit the hardware part. executable files needed
to produce the board like GERBERs are included into the distribution.
this is possible because these targets are not configurable.

HOW TO BUILD (as of May 2008)

In order to build you will need
1. native C compiler
2. ARM tools
3. AVR crosstools

The executables are not distributed because you will always need to
configure the sources.

GERBERS and schematic PNGs will be distributed, 
because the boards and schematics are not configurable and
we don't want to force you to (figure out and) install a gEDA
version compatible with ours.

Stribog uses GNU-standard configuration procedure
(see INSTALL). Though general build versus source directory
positions should work, the canonical way is to build the project 
in a separate directory out of the source tree, so
the configure invocation sounds like this:

../stribog/configure

With such an arrangement, the intermediate output files from
the toolchain and the source configuration system will not
lumber your source tree and disturb the revision control system.

Currently, this procedure has not been fully adopted.
for instructions on using host tools read sw/host/README.

You can disable ARM and AVR targets with --disable-arm-targets
and --disable-avr-targets options. then you
can build and install just the host tools, so you don't need
to install the corresponding toolchains on that host.
this can be useful if the program has already been written
into the MCU ROM or the MCU programs have been built
on another host and fetched from there. thus you can
quickly install the host-side programs on a portable computer
without cross-compiler.

HOW TO REGENERATE BUILD SYSTEM

You should need this only to improve the configuring scripts
and to change the structure of the sources (add/remove source files
and so on). you typically shall not want this.

The configuring scripts are updated with 'autoreconf -v';
you may 'rm -rf $(find . -name autom4te.cache)' after that.

As of May 2008, the versions used are autoconf-2.62 and automake-1.10.1.

For some subdirectories regeneration some portions of build system
(particularly, Makefile.ams) needs building the project
(the corresponding Makefiles contain a rule to refresh those files).

HOW TO USE GIT

Git is the revision control system used by the project.

To see meta-documentation on the project branches, 
checkout 'master' branch and read the files it contains.

Here is a typical ~/.gitconfig file contents
(please replace the names and email with yours):
<<EOF
[user]
 name = Ineiev (favourite host)
 email = ineiev@users.sourceforge.net
[core]
 editor = vim
EOF

For anonymous access, use these:

$ git clone git://git.savannah.nongnu.org/stribog.git
 to make your local repository

$ git checkout -b feb2008 origin/feb2008
 to make a local branch feb2008 based on fetched origin/feb2008

$ git fetch
 to update copies of remote branches

$ git pull
 to fetch all remote branches and merge
 one of them into your current branch

Common to both anonymous and maintainer access:

$ git checkout master
 to switch to existing branch 'master'

$ git checkout -f master
 the same, through away local changes 
 (and delete files removed from fetched repository since last sync)

$ git add .
 to cache the changes in your files against
 the current branch most recent commit

$ git diff
 to see what will be "git add"ed

$ git diff --cached
 to see what has been "git add"ed but not 
 "git commit"ed

$ git branch
 to list the local repository branches

$ git branch -r
 to list the public repositories branches

$git commit
 to move the changes to your current branch

$git show
 to see the latest commit description

$git status
 to see what files are not in sync with the current branch

If you are a maintainer, your usual spells are
(replace ineiev with your login name)

$ git clone ineiev@git.savannah.nongnu.org:/srv/git/stribog.git
 to get a new local repository

$ git remote add savannah ineiev@git.savannah.nongnu.org:/srv/git/stribog.git
 to add a reference for the public repository

$ git push savannah feb2008
 to push into savannah local branch named 'feb2008' 
 (non-existent will be created)

$ git push savannah
 to push into savannah all local branches

$ git push savannah :refs/heads/feb2008
 to remove branch feb2008 from remote savannah


What will go to Git

We currently don't put into the repository gEDA-generated files.
[12 Mar 2008 PCB-generated files are put into the repository
and distribution; we plan also put the object-form schematics]
[25 Apr 2008 these files are in object form. if someone
 redistributes them, this person must provide gEDA, too.
 this is not very convenient.
 currently we can see two solutions:
 (a) not distribute these files, which is not good because
     it makes gEDA mandatory.
 (b) make an exception like "you need not distribute gEDA suit.."
]
[28 Apr 2008 GPLv3 already contains such exception:
>However, it (the "Corresponding Source") does not include the work's
>System Libraries, or general-purpose tools or generally available free
>programs which are used unmodified in performing those activities but
>which are not part of the work.
 GPLv2 does not.
]
however, we do put all Autotools-generated files
that will be distributed.

The general rules are to be worked on yet; the bottomline consideration
should be that Git serves as a source of most recent package version.

We think that today state may be right because
1. gEDA (especially gschem) is not easy to install; it has long dependencies
   on rather new versions of packages.
3. If there are no build scripts, the programs
  can't be developped. this would be wrong because the programs
  can be modified and rebuilt very quickly and at no cost.
  to rebuild the scripts one must have a compatible Autotools version
  installed; but this is not enough. the configuration process is
  very uniform and straightforward; the regeneration of the scripts
  is not trivial and probably package-specific, it generally requires some knowledge
  of several languages other than C, so it can take a lot of time
  when done by a person new to the package. this can be much harder
  than just fixing a bug or adding even a complicated feature.

NOTES ON LICENSING TERMS

This project is distributed under the terms of the GNU GPL. in theory, 
the implications of this on the hardware design
can depend on your jurisdiction. three groups of cases are possible.

1. Your government either
(a)does not honour copyright and Bern Convention,
 or
(b) the law practice of your country does not consider technical articles
like software and hardware descriptions as a pieces of art.

Then you are lucky and the GPL is not about you. beware
that this is the most impossible case, in spite of that
it is the most reasonable one.

2. Both programs and hardware are considered as works of art
and printed circuit boards are treated as derived from the design description
works. then the conditions are like following.

All that comes from the project forms a derived work, including the assembled
boards. they should be distributed in a the GPL-compliant way as "Object Code".
essentially this means that if someone ships a stribog-derived board, 
this person or organisation must make available (for those who get
the product) a copy of documentation needed at least to reproduce this board;
this supplier shall not prevent downstream distribution in terms other
than that of the GPL. another thing to note is the Section 11 of the GNU GPL
(on patents). while there should be no software patents, the hardware ones
are ubiquitous.

As a consequence using stribog-derived circuits in a device is permitted 
in either of two ways:
(a) the whole device is distributed under the terms of the GNU GPL 
 (with the stribog's authors' interpretation for the hardware part).
 this is the preferable way.
(b) the device can reasonably be considered as an independent work. for
example, connecting a board to stribog main board via connectors
that provide power, UART signals and angular rate sensors output does not
make the former board stribog-derived, because there is nothing very
specific in those signals and the boards are distinct;
but if some stribog circuits are incorporated into another board, 
there is no more separable independent work, so that board 
must be covered by the GPL. similarly, if you modify stribog so that
it will require/provide complicated signals from/to your board, therefore
making it unimaginable to function one without the other -- in this
case the whole system shall be covered by the GNU GPL.

3. Printed boards are not considered to be a derived work. this is
probably the most frequent case (at least, this applies to the USA).

You may produce the boards and do all you want with them. you are not
obliged (though encouraged) to give the design files when you supply
the board instances (till now, we have not been speaking of software,
just about the hardware design).

Please note that the intention of these provisions is not to prevent you
from using the project, but to create conditions leading to the society
without copyright restrictions on spreading technical ideas.

The software part is released right under the terms
of the GNU GPL v3 or later with
all new statements on 'Installation Information'; there are few ambiguities.

The following non-text source files possibly contain no copyright notices, 
because it was practically hard or absurd to maintain them there,
or they can go unnoticed there, and stribog's author
decided to move/duplicate those notices here, namely:

hw/main_board.pcb hw/main_board.bis.pcb hw/stribog.sch hw/gyro.sch
hw/sym/ATmega8-1.sym hw/sym/JTAG.sym hw/sym/adm202.sym hw/sym/adxl210.sym
hw/sym/adxrs300.sym hw/sym/bat54c.sym hw/sym/dac7612.sym
hw/sym/hmc1021.sym hw/sym/hmc1022.sym hw/sym/ina118.sym
hw/sym/irf7317.sym hw/sym/irf7507.sym hw/sym/irlml.sym hw/sym/lm74.sym
hw/sym/lp2980AIM5-3.sym hw/sym/lp2980AIM5-5.sym hw/sym/lpc2138.sym
hw/sym/ref195.sym hw/sym/tps76316.sym hw/packages/0.125W_resistor
hw/packages/0603 hw/packages/0805 hw/packages/1210
hw/packages/2.5mm_10pin_header hw/packages/qfp64 hw/packages/adxl210
hw/packages/crystal hw/packages/hmc1021z hw/packages/jtag1.27x1
hw/packages/lp2980 hw/packages/pin hw/packages/tanA hw/packages/tanC
hw/packages/tp

Files in hw/packages and hw/sym directories are not part of stribog,
are not part of the stribog design, but are used with stribog.
they form an `external library' as defined by the FSF.

(See also README files in the respective directories)

To all these files is applied the copyright and license notice placed earlier
in this file. hw/sym/* and hw/packages/* should also have additional copyrights
from their original and intermediate authors. it is very hard to figure out
exact list of authors, because there is neither copyright notice in the files
theirselves nor especially maintained lists of files with respective authors.
all we could tell we are not original authors and the files are distributed
under "GPL v2 or later". for using these files in your packages see discussions
in the gEDA lists. stribog's authors' position is similar to the gEDA developers' 
one, namely, "the symbols/packages contain 'derived work' therefore are to be 
distributed under 'GPL v$(OUR_CURRENT_GPL_VERSION) or later', however 
the schematics/boards files containing those symbols contain no such work and 
the symbols/packages impose no such restriction on them". 

Once more, MOST of the gEDA SYMBOLS (in hw/sym) and PCB FOOTPRINTS 
(in hw/packages) WERE NOT originally DEVELOPPED by STRIBOG'S AUTHOR: 
usually we just slightly corrected files from gEDA and PCB libraries.
the STRIBOG AUTHORS DISCLAIM our EXCLUSIVE COPYRIGHT on ALL those files.
as a sequence, THEY CAN BE DISTRIBUTED under the TERMS of
'GPL v$(OUR_CURRENT_GPL_VERSION) or later' ONLY.

The same is true for the GNU autobuild system files. we let our
copyright notes come into these files like 'configure', and
'Makefile.in', but one should undestand that they are result of
compilation of several sources and such a file can hardly represent
a single copyrighted unit.

These files include:
./INSTALL
./Makefile.in
./aclocal.m4
./config.h.in
./configure
./depcomp
./install-sh
./missing
./hw/Makefile.in
./sw/auxilia/INSTALL
./sw/auxilia/Makefile.in
./sw/auxilia/aclocal.m4
./sw/auxilia/config.guess
./sw/auxilia/config.h.in
./sw/auxilia/configure
./sw/common/Makefile.in
./sw/host/INSTALL
./sw/host/Makefile.in
./sw/host/aclocal.m4
./sw/host/compile
./sw/host/config.h.in
./sw/host/config.guess
./sw/host/configure
./sw/host/config.sub
./sw/host/depcomp
./sw/host/install-sh
./sw/host/missing
./sw/host/postproc/Makefile.in
./sw/host/utils/Makefile.in
./sw/target/INSTALL
./sw/target/Makefile.in
./sw/target/aclocal.m4
./sw/target/config.guess
./sw/target/configure
./sw/target/config.sub
./sw/target/depcomp
./sw/target/install-sh
./sw/target/m4/gnu-make.m4
./sw/target/missing

./sw/target/m4/gnu-make.m4 come from gnulib; it is closely integrated into
the build system and covered by the similar conditions as other
Autotools-generated files.

The text of the GNU GPL, namely
./COPYING ./sw/auxilia/COPYING ./sw/host/COPYING ./sw/target/COPYING 
is copyrighted by the FSF as stated in the file.

The file AUTHORS has a special status. it essentially consists of copyright
notices. as such, these notices can't be removed; the project maintainers
are encouraged to keep the notices up-to-date.
